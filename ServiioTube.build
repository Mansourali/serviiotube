<?xml version="1.0"?>
<project name="VaultExport" default="full" xmlns:nant="http://nant.sourceforge.net/release/0.85/nant.xsd">
	

	<!-- Properties -->
  <property name="src.folder" value="src\"/>
  
  <property name="dist.storage.path" value="C:\Users\Rolf\Dropbox\Public\"/>
  
  <property name="msbuild.executeable" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"/>
  <property name="msbuild.executeable" value="C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe" />
  <property name="msbuild.csc.executeable" value="C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe"/>
  <property name="build.folder" value="build\release" dynamic="true" />
  <property name="build.dist.dir" value="build\dist"/>
  <property name="build.extension.dir" value="build\extension"/>
  <property name="msbuild.bin.folder" value="\bin\${src.sln.configuration.bin.folder}\" dynamic="true" />
  <property name="mercurial.exe" value="hg.exe"/>
  <property name="mercurial.path" value="C:\Program Files\TortoiseHg\"/>
  <property name="chrome.exe" value="chrome.exe"/>
  <property name="chrome.path" value="C:\Users\Rolf\AppData\Local\Google\Chrome\Application\"/>
  <property name="chrome.extenstion.key" value="C:\Users\Rolf\Dropbox\Work\Home\Serviiotube\ServiioTube.pem"/>


  <!-- Version -->
  <property name="version.minor" value="1"/>
  <property name="version.build" value="0" />
  <property name="project.fullversion" value="${version.minor}.${version.build}" dynamic="true" />
 

  <!-- User targets -->
  <target name="clean" depends="delete.folders"  description="Delete Automated Build artifacts"/>
  <target name="compile" depends="copyFiles" description="Compiles using the debug Configuration"/>
  <target name="full" depends="clean, version  , compile, dist , package ,hg.commit ,hg.tag, version.update" description="Compiles, tests, and produces distributions"/>
  <target name="deploy" depends="clean, version, compile, dist" description="Compiles, tests, and produces distributions"/>
  
  <!-- Internal targets -->
  <target name="msbuild.setDebug">
    <property name="src.sln.configuration" value="Debug"/>
  </target>
  
  <target name="delete.folders" description="Compiles using the AutomatedDebug Configuration">
    <delete failonerror="true">
      <fileset basedir="${src.folder}">
        <include name="**\Bin\Release\**"/>
        <include name="**\Bin\Debug\**"/>
        <include name="**\Obj\Debug\**"/>
        <include name="**\Obj\Release\**"/>       
        
      </fileset>
    </delete>
    <delete dir="/obj" failonerror="false"/>
    <delete dir="${build.folder}" failonerror="false"/>
  </target>
  
  <target name="copyFiles">
    <copy todir="${build.folder}\ServiioTube">
      <fileset basedir="${src.folder}">
        <include name="**\*.html"/>
        <include name="**\*.json"/>
        <include name="**\*.png"/>
        <include name="**\*.css"/>
        <include name="**\*.jpg"/>
        <include name="**\*.js"/>
      </fileset>
    </copy>
  </target>


  <target name="version" description="Generate AssemblyInfo">
    <echo message="Marking build with version ${project.fullversion}" />


    <loadfile  file="${src.folder}/manifest.json" property="manifest.Data" />
    //"version": "0.1",
    <regex pattern="(?'replaceme'&quot;version&quot;: &quot;[0-9.]+&quot;)" input="${manifest.Data}" />
    <echo message="${replaceme}" />
    <echo message="${string::replace(manifest.Data, replaceme, '&quot;version&quot;: &quot;'+project.fullversion+'&quot;')}" file="${src.folder}/manifest.json"/>

  </target>
  
  <target name="version.update" description="Generate AssemblyInfo">
    <xmlpeek
    file="ServiioTube.build "
    xpath="/project/property[@name = 'version.build']/@value"
    property="version.build.read">
    </xmlpeek>

    <loadfile  file="ServiioTube.build " property="build.Data" />
    <regex pattern="property (?'replaceme'name=&quot;version.build&quot;.*)" input="${build.Data}" />
    <echo message="${replaceme}" />
    <property name="new.version.build" value="${int::parse(version.build.read)+1}"/>
    <echo message="${string::replace(build.Data, replaceme, 'name=&quot;version.build&quot; value=&quot;'+new.version.build+'&quot; />')}" file="ServiioTube.build "/>

  </target>

  <target name="dist">
    <mkdir dir="${build.dist.dir}" unless="${directory::exists(build.dist.dir)}"/>
    <foreach item="Folder" in="${build.folder}" property="foldername">
      <do>
        <if test="${not (string::contains(foldername,'Tests'))}" >
          <property name="dist.from.folder" value="${foldername}" />
          <property name="dist.to.folder" value="${path::combine(build.dist.dir,path::get-file-name(foldername)+ '.v' + project.fullversion + '.zip'  )}" />
          <echo message="Zip from ${dist.from.folder}" />
          <echo message="Zip to ${dist.to.folder}" />

          <zip zipfile="${dist.to.folder}">
            <fileset basedir="${dist.from.folder}">
              <include name="**\*"/>
            </fileset>
          </zip>
        </if>
      </do>
    </foreach>

    <call target="hg.src"  />
  </target>

  
  <target name="package">

    <exec program="${chrome.exe}" commandline="--no-message-box --pack-extension=${directory::get-current-directory()}\${build.folder}\ServiioTube\ --pack-extension-key=${chrome.extenstion.key}"  failonerror="false" basedir="${chrome.path}"  workingdir="./" />
    <move todir="${build.extension.dir}">
      <fileset basedir="${build.folder}">
        <include name="**\*.crx"/>
      </fileset>
    </move>
    <copy todir="${build.extension.dir}" file="${chrome.extenstion.key}" />
  </target>

  <target name="hg.commit">
    <exec program="${mercurial.exe}" commandline="commit -m &quot;Commit before tagging&quot;"  failonerror="false" basedir="${mercurial.path}"  workingdir="./" />
  </target>

  <target name="hg.tag">
    <exec program="${mercurial.exe}" commandline="tag &quot;${'Version ' + project.fullversion}&quot;"  failonerror="true" basedir="${mercurial.path}"  workingdir="./" />
  </target>

  <target name="hg.src" depends="version" >
    <exec program="${mercurial.exe}" commandline="archive --repository .\ -r tip -t zip -- ${build.dist.dir}\ServiioTube.src.v${project.fullversion}.zip"  failonerror="true" basedir="${mercurial.path}"  workingdir="./" />
  </target>
  
  <target name="dist.to.storage">
    <copy todir="${dist.storage.path}" overwrite="true">
      <fileset basedir="${build.dist.dir}">
        <include name="**\*.zip"/>
      </fileset>
    </copy>
  </target>

	<target name="msbuild.SetReleaseDebug">
    <property name="src.sln.configuration" value="Debug"  />
    <property name="src.sln.configuration.prefix" value="Debug."  />
  </target>
  
</project>